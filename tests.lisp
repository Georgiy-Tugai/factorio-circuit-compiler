(in-package :factorio-circuits.entity)
(5am:test net-merge
  (dolist (color (list :red :green))
    (flet ((side (x) (if (eql color :red) (car x) (cdr x))))
      (let ((e1 (make-instance 'entity-combinator-arithmetic))
            (e2 (make-instance 'entity-combinator-arithmetic))
            (e3 (make-instance 'entity-combinator-arithmetic))
            (e4 (make-instance 'entity-combinator-arithmetic)))
        (entity-connect e1 e2 color)
        (5am:is (eql (side (entity-circuit-output e1)) (side (entity-circuit-input e2))))
        (5am:is (equal `(,e1)
                       (circuit-outputs (side (entity-circuit-output e1)))))
        (5am:is (equal `(,e2)
                       (circuit-inputs (side (entity-circuit-output e1)))))
        (entity-connect e3 e4 color)
        (5am:is (not (eql (side (entity-circuit-output e1)) (side (entity-circuit-input e4)))))
        (entity-connect e1 e4 color)
        (5am:is (eql (side (entity-circuit-output e1))
                     (side (entity-circuit-input e4))))
        (5am:is (eql (side (entity-circuit-output e3))
                     (side (entity-circuit-input e4))))
        (5am:is (eql (side (entity-circuit-output e1))
                     (side (entity-circuit-input e2))))
        (5am:is (equal `(,e3 ,e1)
                       (circuit-outputs (side (entity-circuit-output e1)))))
        (5am:is (equal `(,e4 ,e2)
                       (circuit-inputs (side (entity-circuit-output e1)))))
        (entity-connect e4 e1 color)
        (5am:is (eql (side (entity-circuit-output e4))
                     (side (entity-circuit-input e1))))
        (5am:is (not (eql (side (entity-circuit-output e1))
                          (side (entity-circuit-input e1)))))))))

(5am:test connect-input
  (dolist (color (list :red :green))
    (flet ((side (x) (if (eql color :red) (car x) (cdr x))))
      (let ((e1 (make-instance 'entity-combinator-arithmetic))
            (e2 (make-instance 'entity-combinator-arithmetic))
            (e3 (make-instance 'entity-combinator-arithmetic))
            (e4 (make-instance 'entity-combinator-arithmetic)))
        (entity-connect e1 e2 color)
        (entity-connect e3 e4 color)
        (entity-connect-inputs e1 e3 color)
        (5am:is (eql (side (entity-circuit-input e2))
                     (side (entity-circuit-output e1))))
        (5am:is (eql (side (entity-circuit-input e4))
                     (side (entity-circuit-output e3))))
        (dolist (a (list e1 e2 e3 e4))
          (dolist (b (list e1 e2 e3 e4))
            (when (not (or (eql a b)
                           (member a (list e1 e3))
                           (member b (list e1 e3))))
              (5am:is (not (eql (side (entity-circuit-input a))
                                (side (entity-circuit-input b))))
                      "~A:I == ~A:I" a b))))
        (5am:is (eql (side (entity-circuit-input e1))
                     (side (entity-circuit-input e3))))
        (5am:is (member e1 (circuit-inputs (side (entity-circuit-input e3))))))
      (let ((e1 (make-instance 'entity-combinator-arithmetic))
            (e2 (make-instance 'entity-combinator-arithmetic))
            (e3 (make-instance 'entity-combinator-arithmetic))
            (e4 (make-instance 'entity-combinator-arithmetic)))
        (entity-connect-inputs e1 e3 color)
        (entity-connect e1 e2 color)
        (entity-connect e3 e4 color)
        (5am:is (eql (side (entity-circuit-input e2))
                     (side (entity-circuit-output e1))))
        (5am:is (eql (side (entity-circuit-input e4))
                     (side (entity-circuit-output e3))))
        (dolist (a (list e1 e2 e3 e4))
          (dolist (b (list e1 e2 e3 e4))
            (when (not (or (eql a b)
                           (member a (list e1 e3))
                           (member b (list e1 e3))))
              (5am:is (not (eql (side (entity-circuit-input a))
                                (side (entity-circuit-input b))))
                      "~A:I == ~A:I" a b))))
        (5am:is (eql (side (entity-circuit-input e1))
                     (side (entity-circuit-input e3))))
        (5am:is (member e1 (circuit-inputs (side (entity-circuit-input e3))))))
      (let ((e1 (make-instance 'entity-combinator-arithmetic))
            (e2 (make-instance 'entity-combinator-arithmetic))
            (e3 (make-instance 'entity-combinator-arithmetic))
            (e4 (make-instance 'entity-combinator-arithmetic)))
        (entity-connect-inputs e1 e3 color)
        (entity-connect e1 e4 color)
        (entity-connect-inputs e2 e4 color)
        (entity-connect e3 e2 color)
        (entity-connect-inputs e1 e2 color)
        (5am:is (eql (side (entity-circuit-input e1))
                     (side (entity-circuit-input e2))))
        (5am:is (eql (side (entity-circuit-input e1))
                     (side (entity-circuit-input e3))))
        (5am:is (member e1 (circuit-inputs (side (entity-circuit-input e1)))))
        (5am:is (member e2 (circuit-inputs (side (entity-circuit-input e1)))))
        (5am:is (member e4 (circuit-inputs (side (entity-circuit-input e1)))))
        (5am:is (member e1 (circuit-outputs (side (entity-circuit-input e4)))))
        (5am:is (member e3 (circuit-outputs (side (entity-circuit-input e4)))))))))
